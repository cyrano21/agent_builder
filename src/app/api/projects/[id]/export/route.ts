import { NextRequest, NextResponse } from 'next/server';
import { db } from '@/lib/db';
import JSZip from 'jszip';

export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const { format = 'zip' } = await request.json();

    // Fetch project with all deliverables
    const project = await db.project.findUnique({
      where: { id: params.id },
      include: {
        deliverables: true,
        user: {
          select: {
            name: true,
            email: true,
          },
        },
      },
    });

    if (!project) {
      return NextResponse.json(
        { error: 'Project not found' },
        { status: 404 }
      );
    }

    if (format === 'zip') {
      // Create ZIP file
      const zip = new JSZip();

      // Add project overview
      const projectOverview = `# ${project.title}

## Description
${project.description}

## Generated by Agent Builder Enterprise v2
- Created: ${project.createdAt}
- Last Modified: ${project.updatedAt}
- Status: ${project.status}
- Progress: ${project.progress}%

## User
- Name: ${project.user?.name || 'N/A'}
- Email: ${project.user?.email || 'N/A'}

---

## Deliverables Status
- Product Plan: ${project.plan ? '✅ Completed' : '❌ Pending'}
- Technical Architecture: ${project.architecture ? '✅ Completed' : '❌ Pending'}
- Wireframes: ${project.wireframes ? '✅ Completed' : '❌ Pending'}
- Design System: ${project.design ? '✅ Completed' : '❌ Pending'}
- Backend Code: ${project.backend ? '✅ Completed' : '❌ Pending'}
- DevOps Config: ${project.devops ? '✅ Completed' : '❌ Pending'}
- Documentation: ${project.documentation ? '✅ Completed' : '❌ Pending'}
`;

      zip.file("PROJECT_OVERVIEW.md", projectOverview);

      // Add generated content files
      if (project.generatedPlan) {
        zip.file("deliverables/01_PRODUCT_PLAN.md", project.generatedPlan);
      }

      if (project.generatedArch) {
        zip.file("deliverables/02_TECHNICAL_ARCHITECTURE.md", project.generatedArch);
      }

      if (project.generatedWireframes) {
        zip.file("deliverables/03_WIREFRAMES.md", project.generatedWireframes);
      }

      if (project.generatedDesign) {
        zip.file("deliverables/04_DESIGN_SYSTEM.md", project.generatedDesign);
      }

      if (project.generatedBackend) {
        zip.file("deliverables/05_BACKEND_CODE.md", project.generatedBackend);
      }

      if (project.generatedDevops) {
        zip.file("deliverables/06_DEVOPS_CONFIG.md", project.generatedDevops);
      }

      // Add individual deliverables
      project.deliverables.forEach((deliverable, index) => {
        const fileName = `deliverables/${String(index + 1).padStart(2, '0')}_${deliverable.type.toLowerCase()}.md`;
        zip.file(fileName, deliverable.content);
      });

      // Add README with instructions
      const readme = `# ${project.title} - Complete Project Package

This package contains all the generated deliverables for your project: "${project.description}"

## 📁 Package Contents

### 📄 Documentation
- \`PROJECT_OVERVIEW.md\` - Project summary and status overview
- \`deliverables/\` - All generated deliverables

### 🚀 Getting Started

1. **Review the PROJECT_OVERVIEW.md** to understand the complete project scope
2. **Explore the deliverables folder** for detailed specifications
3. **Follow the implementation order** suggested in each deliverable

### 📋 Implementation Order

1. **Product Plan** - Understand the business requirements
2. **Technical Architecture** - Set up the technical foundation
3. **Design System** - Create consistent UI components
4. **Wireframes** - Design the user interfaces
5. **Backend Code** - Implement the server-side logic
6. **DevOps Configuration** - Set up deployment and CI/CD
7. **Documentation** - Complete the project documentation

### 🛠️ Technologies Used

This project is designed to work with:
- **Frontend**: Next.js 15, TypeScript, Tailwind CSS, shadcn/ui
- **Backend**: Next.js API Routes, Prisma ORM, PostgreSQL
- **DevOps**: Docker, GitHub Actions, Terraform, AWS
- **AI/ML**: GPT-4 Turbo, Claude 3 Opus, LangChain

### 📞 Support

If you need assistance with implementation or have questions:
- Review the generated documentation
- Check the Agent Builder Enterprise documentation
- Contact support for enterprise customers

---

*Generated by Agent Builder Enterprise v2*
*Generated on: ${new Date().toISOString()}*
`;

      zip.file("README.md", readme);

      // Generate ZIP file
      const zipBuffer = await zip.generateAsync({ type: "nodebuffer" });

      // Return the ZIP file
      return new NextResponse(zipBuffer, {
        headers: {
          'Content-Type': 'application/zip',
          'Content-Disposition': `attachment; filename="${project.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_project_package.zip"`,
        },
      });

    } else if (format === 'json') {
      // Return JSON format
      const exportData = {
        project: {
          id: project.id,
          title: project.title,
          description: project.description,
          status: project.status,
          progress: project.progress,
          createdAt: project.createdAt,
          updatedAt: project.updatedAt,
          user: project.user,
        },
        deliverables: {
          plan: project.generatedPlan,
          architecture: project.generatedArch,
          wireframes: project.generatedWireframes,
          design: project.generatedDesign,
          backend: project.generatedBackend,
          devops: project.generatedDevops,
        },
        files: project.deliverables.map(deliverable => ({
          type: deliverable.type,
          content: deliverable.content,
          fileName: deliverable.fileName,
          fileSize: deliverable.fileSize,
          createdAt: deliverable.createdAt,
        })),
      };

      return NextResponse.json(exportData);
    } else {
      return NextResponse.json(
        { error: 'Unsupported export format' },
        { status: 400 }
      );
    }

  } catch (error) {
    console.error('Error exporting project:', error);
    return NextResponse.json(
      { error: 'Failed to export project' },
      { status: 500 }
    );
  }
}